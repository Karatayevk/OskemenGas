from ast import parse
from itertools import count
import os
os.system('cls' if os.name == 'nt' else 'clear')

import random
import requests
import re
from bs4 import BeautifulSoup
from prettytable import PrettyTable,ALL
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from prettytable import SINGLE_BORDER
import aioschedule
from datetime import datetime
import pytz
import asyncio
import aqi_description_funcs, inlinebuttons, facts_list, random_headers
from aiogram.utils.exceptions import (MessageToEditNotFound, MessageCantBeEdited, MessageCantBeDeleted, MessageToDeleteNotFound)


bot = Bot(token='your_tgbot_token')
dp = Dispatcher(bot)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –±–æ—Ç–æ–º (—á–∏—Å–ª–∞ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏).
# –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª—è—é—Ç—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ö–æ—Å—Ç–∏–Ω–≥–∞, –≥–æ—Ä–∞–∑–¥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–π –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –ë–î.
actions_counter = {
    'what is aqi' : 0,
    'bot start' : 0,
    'town info' : 0,
    'stantion info' : 0,
    'pollutants info' : 0,
    'ranking KZ cities' : 0,
    'random facts' : 0,
    'unknown commands' : 0
}

async def counter_increase(choice):
    global actions_counter
    actions_counter[choice] += 1


headers = {
    'User-Agent' : 'your_useragent_info'
}

r = requests.get('https://www.iqair.com/ru/kazakhstan/east-kazakhstan/ust-kamenogorsk', headers=headers)
soup = BeautifulSoup(r.text, 'lxml')

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–π—Ç–∞, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥–æ—Ä–æ–¥–µ –∏ –µ–≥–æ —Ä–∞–π–æ–Ω–∞—Ö.
async def send_request():
    current_data = datetime.now(pytz.timezone("Asia/Almaty"))
    current_hour = current_data.strftime("%H")
    if int(current_hour) >= 6:
        print(f'[INFO]: –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ c–∞–π—Ç—É: {current_data.strftime("%H:%M:%S")}')
        global r, headers, soup
        headers = {
            'User-Agent' : random_headers.rnd_headers[random.randint(0,500)]
        }

        r = requests.get('https://www.iqair.com/ru/kazakhstan/east-kazakhstan/ust-kamenogorsk', headers=headers)
        if r.status_code == 200:
            soup = BeautifulSoup(r.text, 'lxml')
            print(f'[INFO]: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {current_data.strftime("%H:%M:%S")} , {headers["User-Agent"]}')
        else:
            print(f'[INFO]: –ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ.')
            pass
    else:
        print(f'[INFO]: –í–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {current_data.strftime("%H:%M:%S")}')

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –∏–∑ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
def dct_info():
    
    data = soup.find(class_ = 'ranking__table', title="–†–µ–π—Ç–∏–Ω–≥ –£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –≤–æ–∑–¥—É—Ö–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")

    rep = {
            '#stationAQI –°–®–ê1 ': '',
            'Ust-Kamanogorsk - no.2: Piterskikh Kommunarov' : '–ü—Ä–∏—Å—Ç–∞–Ω—å ',
            'Ust-Kamanogorsk - no.3: Voroshilov st.' : '–í–æ—Ä–æ—à–∏–ª–æ–≤–∞ ',
            'Rabochaya street 6' : '–ë–∞–∂–æ–≤–∞ ',
            'Satpayev st. 12' : '–ö–®–¢ ',
            'Tynyshpayev st. 126' : '–ó–∞—â–∏—Ç–∞ ',
            'Electrical Goods' : '–≠–ª–µ–∫—Ç—Ä–æ—Ç–æ–≤–∞—Ä—ã ',
            'CDC' : '–¶–î–ö ',
            'Egorova st. 6' : '–°–æ–≥—Ä–∞ '
        }


    rep = dict((re.escape(k), v) for k,v in rep.items())
    pattern = re.compile('|'.join(rep.keys()))
    stantion_data = pattern.sub(lambda m: rep[re.escape(m.group(0))], data.text).split()

    del stantion_data[2::3]

    stantion_data = list(map(lambda el:[int(el), aqi_description_funcs.aqi_shortdescription(int(el))] if stantion_data.index(el) % 2 != 0 else el, stantion_data))
    dct = dict(zip(stantion_data[::2], stantion_data[1::2]))
    return dct

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã c –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞–Ω—Ü–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞.
def stantion_info_table():
    table = PrettyTable(border=False,preserve_internal_border=False)
    table.set_style(SINGLE_BORDER)
    table.hrules=ALL
    table.field_names = ['–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'AQI','–ö–∞—á–µ—Å—Ç–≤–æ']
    table.add_rows(
        [
        ['—Å—Ç–∞–Ω—Ü–∏–∏',' üí® ','–≤–æ–∑–¥—É—Ö–∞'],
        ['','','']
        ])

    for k,v in dct_info().items():
        table.add_row([str.ljust(k,13),str.ljust(str(v[0]),3), str.ljust(v[1],10)])
    return table

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª–µ–π –≤–æ–∑–¥—É—Ö–∞.
def pollutants_table_info():
    pollutants = soup.find('table', class_ ='aqi-overview-detail__other-pollution-table').text.split(' ')
    del pollutants[0]
    pollutants = [(re.sub(r'¬µg/m¬≥', '', x)) for x in pollutants]
    pollutants = [float(str(x.replace('*',''))) if y % 2 != 0 else str(x.replace('*','')) for y,x in enumerate(pollutants)]
    pollutants_dct = {}

    for i in range(0,len(pollutants),2):
        if i == len(pollutants)-1:
            break
        else:
            pollutants_dct[pollutants[i]] = pollutants[i+1]


    recommended_values24h = {'PM2.5': 15.0, 'PM10' : 45.0, 'SO2' : 40.0, 'CO':'-', 'NO2' : '-'}

    pollutants_table = PrettyTable(border=False,preserve_internal_border=False)

    pollutants_table.set_style(SINGLE_BORDER)
    pollutants_table.hrules=ALL
    pollutants_table.field_names = ['–ó–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—å', '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è', '–ù–æ—Ä–º–∞']


    pollutants_table.add_rows(
        [
            ['', '¬µg/m¬≥', '¬µg/m¬≥'],
            ['','','']
        ]
    )

    for k,v in pollutants_dct.items():
        pollutants_table.add_row([str.ljust(k,5), f'{str.rjust(str(v),5)}' if k == 'CO' or k == 'NO2' else f'{str.rjust(str(v),5)}üü¢' if v <= recommended_values24h[k] else f'{str.rjust(str(v),5)}üî¥', recommended_values24h[k]])
    
    return pollutants_table

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≥–æ—Ä–æ–¥–æ–≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –ø–æ —É—Ä–æ–≤–Ω—é AQI (Air Quality Index).
def cities_ranking_table():            
    cities_info = str(soup.find("table", class_ = "ranking__table"))
    cities_list = [word[1].replace(',','') for word in map(str.split, re.findall(r'href="[^\s]* [^\s]*',cities_info))]
    aqi_in_cities = [int(word[1]) for word in map(str.split, re.findall(r'-pill"> [^\s]*',cities_info))]
    nums = list(range(1,11))
    aqi_in_cities = [str(i) + 'üü¢' if i <= 50 else str(i) + 'üü°' if 51 <= i <= 100 else str(i) + 'üü†' if 101 <= i <= 150 else str(i) + 'üî¥' for i in aqi_in_cities]
    aqi_cities_table = PrettyTable(border=False,preserve_internal_border=False)
    aqi_cities_table.field_names = ["#", '–ì–æ—Ä–æ–¥', 'AQI USA']
    for i in range(len(cities_list)):
        aqi_cities_table.add_row([nums[i], str.ljust(cities_list[i],18), str.rjust(aqi_in_cities[i],4)])
    return aqi_cities_table

# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–π—Ç–∞ , –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±–æ—Ç –æ–±—Ä–∞—â–∞–µ—Ç—Å—è.
def get_date():  
    date_info = soup.find(class_ = 'timestamp__wrapper').text
    return date_info

# –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π , –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
@dp.message_handler(commands=['secret_stats'])
async def command_start(message : types.Message):
    stats_table = PrettyTable(border=False,preserve_internal_border=False)
    stats_table.field_names = ["action".center(17) , "count".center(6)]
    for k,v in actions_counter.items():
        stats_table.add_row([str.ljust(k,25), str.rjust(str(v),6)])
    await bot.send_message(message.from_user.id, f'Note: when the server is restarted, the data is reset.')
    await bot.send_message(message.from_user.id, f'actions with bot:\n<pre>{stats_table}</pre>', parse_mode='html')

@dp.message_handler(commands=['help'])
async def command_start(message : types.Message):
    await message.answer(
f'–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º , –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /gas.')

@dp.message_handler(commands=['start'])
async def gas_info(message: types.Message):
    await counter_increase('bot start')
    await bot.send_message(chat_id='843683451', text = f"""[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞. 
[INFO]: –ò–º—è - {message.from_user.first_name}.
[INFO]: –§–∞–º–∏–ª–∏—è - {message.from_user.last_name}.""")
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç! –î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥.–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫ \
–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∑–∞–ø—Ä–æ—Å—É. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤—ã–±–æ—Ä–æ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é. \n\n\
–í —Å–ª—É—á–∞–µ , –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–≤–æ–¥ –º–µ–Ω—é , –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /gas.')
    await bot.send_message(message.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=inlinebuttons.choice)


@dp.message_handler(commands=['gas'])
async def gas_info(message: types.Message):
    await counter_increase('bot start')
    await bot.send_message(chat_id='843683451', text = f"""[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º. 
[INFO]: –ò–º—è - {message.from_user.first_name}.
[INFO]: –§–∞–º–∏–ª–∏—è - {message.from_user.last_name}.""")
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.choice)

@dp.callback_query_handler(text='town_info')
async def send_town_info(message: types.Message):
        await counter_increase('town info')
        await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–¥ –ø–æ –≥–æ—Ä–æ–¥—É.')
        try:
            await bot.delete_message(message.from_user.id, message.message.message_id)
        except MessageCantBeDeleted:
            await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message cant be deleteted')
            await bot.send_message(message.from_user.id, f'Air Quality Index (AQI) - –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞, —á–µ–º –≤—ã—à–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å - —Ç–µ–º –±–æ–ª–µ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω –≤–æ–∑–¥—É—Ö.')
            await bot.send_message(message.from_user.id, f'<pre>{stantion_info_table()}</pre>', parse_mode='html')
            await bot.send_message(message.from_user.id, f'{get_date()}')
        except MessageToDeleteNotFound:
            await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message to dele not found')
            await bot.send_message(message.from_user.id, f'Air Quality Index (AQI) - –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞, —á–µ–º –≤—ã—à–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å - —Ç–µ–º –±–æ–ª–µ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω –≤–æ–∑–¥—É—Ö.')
            await bot.send_message(message.from_user.id, f'<pre>{stantion_info_table()}</pre>', parse_mode='html')
            await bot.send_message(message.from_user.id, f'{get_date()}')
        else:
            await bot.send_message(message.from_user.id, f'Air Quality Index (AQI) - –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞, —á–µ–º –≤—ã—à–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å - —Ç–µ–º –±–æ–ª–µ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω –≤–æ–∑–¥—É—Ö.')
            await bot.send_message(message.from_user.id, f'<pre>{stantion_info_table()}</pre>', parse_mode='html')
            await bot.send_message(message.from_user.id, f'{get_date()}')
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.only_back_menu)


@dp.callback_query_handler(text='detail_info')
async def send_town_info(message: types.Message):
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', reply_markup=inlinebuttons.stantion_info)



@dp.callback_query_handler(text='what_is_aqi')
async def send_town_info(message: types.Message):
        await counter_increase('what is aqi')
        try:
            await bot.delete_message(message.from_user.id, message.message.message_id)
        except MessageCantBeDeleted:
            await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message delete')
        await bot.send_photo(message.from_user.id, photo='https://i.imgur.com/RqkESG1.jpg')
        await bot.send_photo(message.from_user.id, photo='https://i.imgur.com/UvzOwGs.jpg')
        await bot.send_message(message.from_user.id, '–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - iqair.com.')
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.choice)


@dp.callback_query_handler(text='random_fact')
async def send_town_info(message: types.Message):
        await counter_increase('random facts')
        try:
            await bot.delete_message(message.from_user.id, message.message.message_id)
        except MessageCantBeDeleted:
            await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message delete')
        await bot.send_message(message.from_user.id, f"""–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Çüìö:
        
{facts_list.facts[random.randint(0,52)]}""")
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.back_or_random_fact)

@dp.callback_query_handler(text='more_facts')
async def send_more_facts(message: types.Message):
    await counter_increase('random facts')
    try:
        await bot.delete_message(message.from_user.id, message.message.message_id)
    except MessageCantBeDeleted:
        await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message delete')
    await bot.send_message(message.from_user.id, f'–ï—â–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Çüìö:\n\n{facts_list.facts[random.randint(0,52)]}')
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.back_or_random_fact)

@dp.callback_query_handler(text='back')
async def send_more_facts(message: types.Message):
    try:
        await bot.delete_message(message.from_user.id, message.message.message_id)
    except MessageCantBeDeleted:
        await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message delete')
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.choice)



@dp.callback_query_handler(lambda c: c.data and c.data in ['–ü—Ä–∏—Å—Ç–∞–Ω—å','–°–æ–≥—Ä–∞','–ó–∞—â–∏—Ç–∞','–ë–∞–∂–æ–≤–∞','–ö–®–¢','–≠–ª–µ–∫—Ç—Ä–æ—Ç–æ–≤–∞—Ä—ã','–¶–î–ö','–í–æ—Ä–æ—à–∏–ª–æ–≤–∞'])
async def process_callback_button1(callback_query: types.CallbackQuery):
        await counter_increase('stantion info')
        await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.username} ({callback_query.from_user.first_name} {callback_query.from_user.last_name}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–¥ –ø–æ —Ä–∞–π–æ–Ω—É {callback_query.data}')
        await bot.answer_callback_query(callback_query.id)  
        try:
            await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
        except MessageCantBeDeleted:
            await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.username} error message delete')         
        try:
            await bot.send_message(callback_query.from_user.id, f'–°—Ç–∞–Ω—Ü–∏—è: {callback_query.data}\n\n{aqi_description_funcs.aqi_longdescription(dct_info()[callback_query.data][0])}\n\n{get_date()}')
        except KeyError:
            await bot.send_message(callback_query.from_user.id, f"""
–î–∞–Ω–Ω—ã–µ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ iqair –ø–æ —Å—Ç–∞–Ω—Ü–∏–∏ '{callback_query.data}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥—Ä—É–≥–∏–º —Ä–∞–π–æ–Ω–∞–º –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é.
""")
        await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=inlinebuttons.select_stantion_or_menu)

@dp.callback_query_handler(text='pollutants')
async def send_pollutants_info(message: types.Message):
        await counter_increase('pollutants info')
        await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–¥ –ø–æ –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—è–º.')
        try:
            await bot.delete_message(message.from_user.id, message.message.message_id)
        except MessageCantBeDeleted:
            await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message delete')
        await bot.send_photo(message.from_user.id, photo='https://imgur.com/a/b99Bn13')
        await bot.send_message(message.from_user.id, f'<pre>{pollutants_table_info()}</pre>', parse_mode='html')  
        await bot.send_message(message.from_user.id, f"""{get_date()}

üìå–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
üü¢ - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º–µ. 
üî¥ - –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã.  
¬µg/m¬≥ = –º–∫–≥/–º¬≥
–°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω—ã–µ –Ω–æ—Ä–º—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –í—Å–µ–º–∏—Ä–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.""")
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.only_back_menu)

@dp.callback_query_handler(text='kz_cities_info')
async def send_ranking_info(message: types.Message):
        await counter_increase('ranking KZ cities')
        await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–¥ –ø–æ –≥–æ—Ä–æ–¥–∞–º –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞.')
        try:
            await bot.delete_message(message.from_user.id, message.message.message_id)
        except MessageCantBeDeleted:
            await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} error message delete')
        await bot.send_message(message.from_user.id, f'üìå–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —á–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å AQI - —Ç–µ–º –±–æ–ª–µ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω –≤–æ–∑–¥—É—Ö.\n\n{get_date()}')
        await bot.send_message(message.from_user.id, f'<pre>{cities_ranking_table()}</pre>', parse_mode='html')  
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=inlinebuttons.only_back_menu)

@dp.message_handler()
async def unknown_command(message: types.Message):
        await counter_increase('unknown commands')
        await bot.send_message(chat_id='843683451', text = f'[INFO]: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name}) –≤–≤–µ–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É - {message.text}.')
        await message.reply(f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É , –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /gas.')

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–∞–π—Ç–∞ iqair.com.
async def scheduler():
    aioschedule.every().hour.at(":35").do(send_request)
    while True:
        await aioschedule.run_pending() 
        await asyncio.sleep(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—É—Å–∫—É —Ñ—É–Ω–∫—Ü–∏–∏.
async def on_startup(_):
    asyncio.create_task(scheduler())


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
